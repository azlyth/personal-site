---
description: 
globs: 
alwaysApply: true
---
# Lab Experiments - Collaborative Interactive Experiments

## Overview
The lab section contains interactive, collaborative experiments that use WebSocket connections to enable real-time multiplayer interactions. Each experiment follows a consistent pattern with desktop preview and mobile controller interfaces.


## Experiment Structure

### Content Files
- Experiments are defined in [content/lab/](mdc:content/lab) directory
- Each experiment needs a markdown file: `experiment-N.md` with TOML frontmatter
- Template reference in frontmatter determines rendering (e.g., `template = "experiment-drawing.html"`)
- Weight determines display order

### Template System
- Individual experiment pages use dedicated templates in [templates/](mdc:templates)
- The main lab page [templates/lab.html](mdc:templates/lab.html) embeds all experiments inline
- Each experiment needs both individual template AND integration into [templates/lab.html](mdc:templates/lab.html)

### Backend Integration
- WebSocket server in [lab-backend/server.js](mdc:lab-backend/server.js) handles real-time communication
- Global sessions pattern: `GLOBAL_[EXPERIMENT]_SESSION` constants
- Each experiment needs: session creation, joining, data handling, and disconnection logic

## Adding New Experiments

### 1. Content File
Create `content/lab/experiment-N.md`:
```markdown
+++
title = "Experiment #N: [Name]"
date = 2025-MM-DD
weight = N
template = "experiment-[name].html"
+++
```

### 2. Individual Template
Create `templates/experiment-[name].html` with:
- Desktop view: QR code + live preview
- Mobile view: controller interface (hidden header)
- WebSocket integration with experiment-specific events
- Responsive design considerations

### 3. Lab Page Integration
Update [templates/lab.html](mdc:templates/lab.html):
- Add experiment condition in template loop
- Create experiment-specific HTML structure
- Add JavaScript initialization function
- Include WebSocket event handlers

### 4. Backend Functionality
Update [lab-backend/server.js](mdc:lab-backend/server.js):
- Add global session constant
- Create session storage map
- Implement socket event handlers
- Add disconnect cleanup
- Update health endpoint

## Design Patterns

### Mobile-First Approach
- Canvas/interactive elements should be phone-shaped (9:16 aspect ratio)
- Use responsive sizing: `max-width: 95vw` for mobile compatibility
- Touch-optimized controls with proper touch-action handling
- Header-less mobile interface for immersive experience

### WebSocket Communication
- Desktop creates sessions, mobile joins via QR code
- Global session IDs for persistence across page reloads
- Real-time state synchronization between all connected clients
- Player count tracking and display

### UI Consistency
- Experiment headers: `<strong>Experiment #N:</strong> Title` format
- QR codes with "Join [Action]" labels
- Player count display: "N players [action]"
- Error message containers with consistent styling

## Current Experiments

### Experiment #1: Minus, Plus
- Template: [templates/experiment.html](mdc:templates/experiment.html)
- Shared counter with increment/decrement controls

### Experiment #2: Go Board
- Template: [templates/experiment-go.html](mdc:templates/experiment-go.html)
- Collaborative Go game with move validation

### Experiment #3: Finger Painting
- Template: [templates/experiment-drawing.html](mdc:templates/experiment-drawing.html)
- Real-time collaborative drawing canvas with color selection

## Development Workflow
- Use `make dev` for development server
- Backend runs on port 3001, frontend on 1111
- QR codes automatically generate mobile controller URLs
- Test mobile interface by clicking QR codes or using `?mobile=true` parameter

## Key Files
- [templates/lab.html](mdc:templates/lab.html) - Main lab page with all experiments
- [lab-backend/server.js](mdc:lab-backend/server.js) - WebSocket server
- [content/lab/_index.md](mdc:content/lab/_index.md) - Lab section configuration
- [Makefile](mdc:Makefile) - Development commands
